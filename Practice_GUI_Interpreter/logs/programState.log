ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={3}}
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1={}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 1)
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
createSemaphore(cnt, rH(v1))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->0, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(print(rH(v1));releaseSemaphore(cnt)))))
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
fork((acquireSemaphore(cnt);(wH(v1,rH(v1)*10);(wH(v1,rH(v1)*2);(print(rH(v1));releaseSemaphore(cnt))))))
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=1}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 2
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{2}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
acquireSemaphore(cnt)
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
print(rH(v1)-1)
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 3
Execution Stack = 
acquireSemaphore(cnt)
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{1}}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*10)
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=10}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
wH(v1,rH(v1)*2)
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=100}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
print(rH(v1))
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
releaseSemaphore(cnt)

Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{3}}
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int)}
Output List = {10,9,200}
File Table = {}
Heap = {1=200}
Semaphore Table = {1->1{}}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(b) THEN(c=100)ELSE(c=200))
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(b) THEN(c=100)ELSE(c=200))
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=100
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=100
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(false) THEN(c=100)ELSE(c=200))
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(false) THEN(c=100)ELSE(c=200))
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)

Symbols Table = {b->true, c->200}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)

Symbols Table = {b->true, c->200}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {b->true, c->200}
Output List = {100,200}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
bool b
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
int c
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
b=true
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->false, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (b) ? 100 : 200
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(b) THEN(c=100)ELSE(c=200))
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(b) THEN(c=100)ELSE(c=200))
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=100
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=100
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c= (false) ? 100 : 200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(false) THEN(c=100)ELSE(c=200))
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(IF(false) THEN(c=100)ELSE(c=200))
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
c=200
print(c)

Symbols Table = {b->true, c->100}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)

Symbols Table = {b->true, c->200}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
print(c)

Symbols Table = {b->true, c->200}
Output List = {100}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {b->true, c->200}
Output List = {100,200}
File Table = {}
Heap = {}
Semaphore Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)null10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)null10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)null10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)null10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)null10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)null10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)null10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@4df47ef1
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 4
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@306243d7
====================>


ID = 1
Execution Stack = 
int v
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
int v
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
int v
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
repeat (fork((print(v);v=v-1))) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
while(v==3 and false) fork((print(v);v=v-1))
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {v->0}
Output List = {0,0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0,0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0,0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {v->-1}
Output List = {0,0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@35eab236
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {v->1}
Output List = {0,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {v->-1}
Output List = {0,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@66962d87
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
v=v+1
while(v==3 and false) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@2b09d8b9
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
int v
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
repeat ((fork((print(v);v=v-1));v=v+1)) until (v==3)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
v=v-1

Symbols Table = {v->0}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {v->-1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->1}
Output List = {0}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
v=v-1

Symbols Table = {v->1}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
v=v-1

Symbols Table = {v->1}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {v->0}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v-1))
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
v=v+1
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->3}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
while(!v==3) (fork((print(v);v=v-1));v=v+1)
print(v*10)

Symbols Table = {v->3}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
print(v)
v=v-1

Symbols Table = {v->2}
Output List = {0,1}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->3}
Output List = {0,1,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
v=v-1

Symbols Table = {v->2}
Output List = {0,1,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
print(v*10)

Symbols Table = {v->3}
Output List = {0,1,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
v=v-1

Symbols Table = {v->2}
Output List = {0,1,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {v->3}
Output List = {0,1,2,30}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 4
Execution Stack = 
(EMPTY)
Symbols Table = {v->1}
Output List = {0,1,2,30}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@f7b3fef
====================>


ID = 1
Execution Stack = 
Ref(int) a
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
Ref(int) a
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
Ref(int) a
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
new(a, 20)
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
for(v=0; v<3; v=v+1) { fork((print(v);v=v*rH(a))) }
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
int v
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
int v
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
int v
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
int v
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int)}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=0
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->0}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {a->(1, int), v->0}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->1}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {a->(1, int), v->20}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
fork((print(v);v=v*rH(a)))
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
v=v+1
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->3}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
while(v<3) (fork((print(v);v=v*rH(a)));v=v+1)
print(rH(a))

Symbols Table = {a->(1, int), v->3}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
print(v)
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
print(rH(a))

Symbols Table = {a->(1, int), v->3}
Output List = {0,1,2}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1,2}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
print(rH(a))

Symbols Table = {a->(1, int), v->3}
Output List = {0,1,2}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
v=v*rH(a)

Symbols Table = {a->(1, int), v->2}
Output List = {0,1,2}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {a->(1, int), v->3}
Output List = {0,1,2,20}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 4
Execution Stack = 
(EMPTY)
Symbols Table = {a->(1, int), v->40}
Output List = {0,1,2,20}
File Table = {}
Heap = {1=20}
Semaphore Table = {}
Latch Table = antonio.interpreter.interpreter.domain.state.LatchTable@3f184ecb
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v1
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v2
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
Ref(int) v3
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
int cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(0, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(0, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(0, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
newLatch(cnt, rH(v2))
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->0, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {}
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
fork((wH(v1,rH(v1)*10);(print(rH(v1));(countDownLatch(cnt);fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))))))
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
wH(v1,rH(v1)*10)
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=2, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
print(rH(v1))
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 2
Execution Stack = 
countDownLatch(cnt)
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->3}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 2
Execution Stack = 
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 2
Execution Stack = 
fork((wH(v2,rH(v2)*10);(print(rH(v2));(countDownLatch(cnt);fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
wH(v2,rH(v2)*10)
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=3, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
print(rH(v2))
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 3
Execution Stack = 
countDownLatch(cnt)
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->2}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 3
Execution Stack = 
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 3
Execution Stack = 
fork((wH(v3,rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
wH(v3,rH(v3)*10)
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=4}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
print(rH(v3))
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 4
Execution Stack = 
countDownLatch(cnt)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->1}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 4
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
awaitLatch(cnt)
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
countDownLatch(cnt)
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
print(100)

Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {cnt->1, v1->(1, int), v2->(2, int), v3->(3, int)}
Output List = {20,2,30,3,40,4,100,1,100}
File Table = {}
Heap = {1=20, 2=30, 3=40}
Semaphore Table = {}
Latch Table = {1->0}
====================>


ID = 1
Execution Stack = 
int v
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
int v
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
int v
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
v=10
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->0}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
fork((v=v-1;(v=v-1;print(v))))
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
v=v-1
print(v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
v=v-1
print(v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
v=v-1
print(v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(10)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
v=v-1
print(v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(9)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
print(v)

Symbols Table = {v->9}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(9)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
print(v)

Symbols Table = {v->9}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(8)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
print(v)

Symbols Table = {v->9}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(8)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
v=v-1
print(v)

Symbols Table = {v->9}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(7)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
print(v)

Symbols Table = {v->8}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(7)
print(10*v)

Symbols Table = {v->10}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
print(v)

Symbols Table = {v->8}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(6)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table = {v->8}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(6)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(5)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(5)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(4)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(4)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(3)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(3)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(2)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(2)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(1)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(1)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(0)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
sleep(0)
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
print(10*v)

Symbols Table = {v->10}
Output List = {8}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table = {v->10}
Output List = {8,100}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
====================>


ID = 1
Execution Stack = 
int v
v=2
print(v)

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
int v
v=2
print(v)

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
int v
v=2
print(v)

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
v=2
print(v)

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
v=2
print(v)

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
v=2
print(v)

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
v=2
print(v)

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
print(v)

Symbols Table Stack = {{v->2}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
print(v)

Symbols Table Stack = {{v->2}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table Stack = {{v->2}}
Output List = {2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = antonio.interpreter.interpreter.domain.state.ProcTable@3233c3ff
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@452fa3ea
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@2c5eab92
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@6c0512da
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@91855d4
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@5506dc5b
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@a77f8eb
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@9ec5fc4
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@7b7df7b2
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@7299c65b
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
antonio.interpreter.interpreter.domain.statements.ReturnStmt@481c6ee7
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
antonio.interpreter.interpreter.domain.statements.ReturnStmt@30635d70
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
antonio.interpreter.interpreter.domain.statements.ReturnStmt@7217d5bf
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int w
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=2
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->0, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
w=5
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->0}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
call sum({v*10,w})
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
int v
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
v=a+b
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->0}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
return
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{a->20, b->5, v->25}|{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
print(v)
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
fork((call product({v,w});fork(call sum({v,w}))))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 1
Execution Stack = 
(EMPTY)
Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
call product({v,w})
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
call product({v,w})
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
call product({v,w})
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
call product({v,w})
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
int v
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
int v
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
int v
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
int v
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
v=a*b
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->10}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
print(v)
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->10}|{v->2, w->5}}
Output List = {25,2}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->10}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
return
fork(call sum({v,w}))

Symbols Table Stack = {{a->2, b->5, v->10}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
fork(call sum({v,w}))

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 2
Execution Stack = 
(EMPTY)
Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
call sum({v,w})

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
call sum({v,w})

Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
int v
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
int v
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
int v
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
int v
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
v=a+b
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->0}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->7}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
print(v)
return

Symbols Table Stack = {{a->2, b->5, v->7}|{v->2, w->5}}
Output List = {25,2,10}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
return

Symbols Table Stack = {{a->2, b->5, v->7}|{v->2, w->5}}
Output List = {25,2,10,7}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
return

Symbols Table Stack = {{a->2, b->5, v->7}|{v->2, w->5}}
Output List = {25,2,10,7}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


ID = 3
Execution Stack = 
(EMPTY)
Symbols Table Stack = {{v->2, w->5}}
Output List = {25,2,10,7}
File Table = {}
Heap = {}
Semaphore Table = {}
Latch Table = {}
Lock Table = {}
Barrier Table = {}
Proc Table = {product->{a,b}=(int v;(v=a*b;print(v))), sum->{a,b}=(int v;(v=a+b;print(v)))}
====================>


